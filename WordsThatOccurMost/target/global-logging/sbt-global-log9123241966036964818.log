[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\CONSULTOR\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\CONSULTOR\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (Oracle Corporation Java 1.8.0_311)
[debug]       Load.loadUnit: plugins took 134.7228ms
[debug]       Load.loadUnit: defsScala took 0.2219ms
[debug] [Loading] Scanning directory C:\Users\CONSULTOR\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\CONSULTOR\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 13.5884 ms
[debug]           Load.resolveProject(global-plugins) took 50.3607ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\CONSULTOR\.sbt\1.0\plugins, plugins: List(<none>))) took 83.5812ms
[debug] [Loading] Done in C:\Users\CONSULTOR\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 109.2934ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2567ms
[debug]     Load.loadUnit(file:/C:/Users/CONSULTOR/.sbt/1.0/plugins/, ...) took 250.7985ms
[debug]   Load.apply: load took 581.4262ms
[debug]   Load.apply: resolveProjects took 7.8424ms
[debug]   Load.apply: finalTransforms took 56.6491ms
[debug]   Load.apply: config.delegates took 7.7257ms
[debug]   Load.apply: Def.make(settings)... took 573.0752ms
[debug]   Load.apply: structureIndex took 97.4646ms
[debug]   Load.apply: mkStreams took 3.3751ms
[info] loading global plugins from C:\Users\CONSULTOR\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 5619.5467ms
[debug]           Load.loadUnit: plugins took 19.271ms
[debug]           Load.loadUnit: defsScala took 0.0052ms
[debug] [Loading] Scanning directory C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost\project
[debug]             Load.loadUnit: mkEval took 30.1502ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.3771 ms
[info] loading settings for project wordsthatoccurmost-build from idea.sbt ...
[debug]               Load.resolveProject(wordsthatoccurmost-build) took 7.4214ms
[debug]             Load.loadTransitive: finalizeProject(Project(id wordsthatoccurmost-build, base: C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost\project, plugins: List(<none>))) took 11.3976ms
[debug] [Loading] Done in C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost\project, returning: (wordsthatoccurmost-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 192.9474ms
[debug]           Load.loadUnit: cleanEvalClasses took 3.9374ms
[debug]         Load.loadUnit(file:/C:/Users/CONSULTOR/Documents/Becario%20Infomedia/Scala/FromPytonToScala/WordsThatOccurMost/project/, ...) took 217.3324ms
[debug]       Load.apply: load took 218.6486ms
[debug]       Load.apply: resolveProjects took 0.1096ms
[debug]       Load.apply: finalTransforms took 11.8759ms
[debug]       Load.apply: config.delegates took 0.7477ms
[debug]       Load.apply: Def.make(settings)... took 70.9953ms
[debug]       Load.apply: structureIndex took 18.6291ms
[debug]       Load.apply: mkStreams took 0.0028ms
[info] loading project definition from C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 1200.3825ms
[debug]     Load.loadUnit: defsScala took 0.0063ms
[debug] [Loading] Scanning directory C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost
[debug]       Load.loadUnit: mkEval took 0.2308ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.8778 ms
[info] loading settings for project wordsthatoccurmost from build.sbt ...
[debug]         Load.resolveProject(wordsthatoccurmost) took 27.6648ms
[debug]       Load.loadTransitive: finalizeProject(Project(id wordsthatoccurmost, base: C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost, plugins: List(<none>))) took 30.742ms
[debug] [Loading] Done in C:\Users\CONSULTOR\Documents\Becario Infomedia\Scala\FromPytonToScala\WordsThatOccurMost, returning: (wordsthatoccurmost)
[debug]     Load.loadUnit: loadedProjectsRaw took 103.1642ms
[debug]     Load.loadUnit: cleanEvalClasses took 3.027ms
[debug]   Load.loadUnit(file:/C:/Users/CONSULTOR/Documents/Becario%20Infomedia/Scala/FromPytonToScala/WordsThatOccurMost/, ...) took 1307.4331ms
[debug] Load.apply: load took 1309.1064ms
[debug] Load.apply: resolveProjects took 0.1412ms
[debug] Load.apply: finalTransforms took 22.0609ms
[debug] Load.apply: config.delegates took 0.4145ms
[debug] Load.apply: Def.make(settings)... took 64.3297ms
[debug] Load.apply: structureIndex took 20.0155ms
[debug] Load.apply: mkStreams took 0.0026ms
[info] set current project to WordsThatOccurMost (in build file:/C:/Users/CONSULTOR/Documents/Becario%20Infomedia/Scala/FromPytonToScala/WordsThatOccurMost/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57779 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57779, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to WordsThatOccurMost (in build file:/C:/Users/CONSULTOR/Documents/Becario%20Infomedia/Scala/FromPytonToScala/WordsThatOccurMost/)
[debug] > Exec(idea-shell, None, None)
